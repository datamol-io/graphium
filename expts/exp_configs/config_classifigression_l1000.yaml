# Testing the mpnn only model with the PCQMv2 dataset on IPU.
constants:
  name: &name neurips2023_small_data_mpnn
  seed: &seed 42
  raise_train_error: true   # Whether the code should raise an error if it crashes during training

#accelerator:
#  type: ipu  # cpu or ipu or gpu
#  config_override:
#    datamodule:
#      args:
#        ipu_dataloader_training_opts:
#          mode: async
#          max_num_nodes_per_graph: 24 # train max nodes: 20, max_edges: 54
#          max_num_edges_per_graph: 60
#        ipu_dataloader_inference_opts:
#          mode: async
#          max_num_nodes_per_graph: 24 # valid max nodes: 51, max_edges: 118
#          max_num_edges_per_graph: 60
#        # Data handling-related
#        batch_size_training: 50
#        batch_size_inference: 50
##    predictor:
##      optim_kwargs:
##        loss_scaling: 1024
#    trainer:
#      trainer:
#        precision: 16
#        accumulate_grad_batches: 4
#
#  ipu_config:
#    - deviceIterations(20) # IPU would require large batches to be ready for the model.
#    - replicationFactor(16)
#    # - enableProfiling("graph_analyser")       # The folder where the profile will be stored
#    # - enableExecutableCaching("pop_compiler_cache")
#    - TensorLocations.numIOTiles(128)
#    - _Popart.set("defaultBufferingDepth", 128)
#    - Precision.enableStochasticRounding(True)

accelerator:
 type: gpu  # cpu or ipu or gpu
 config_override:
   datamodule:
     batch_size_training: 64
     batch_size_inference: 256
   trainer:
     trainer:
       precision: 32
       accumulate_grad_batches: 1

datamodule:
  module_type: "MultitaskFromSmilesDataModule"
  # module_type: "FakeDataModule"  # Option to use generated data
  args: # Matches that in the test_multitask_datamodule.py case.
    task_specific_args:   # To be replaced by a new class "DatasetParams"
      l1000_vcap:
        df: null
        df_path: graphium/data/neurips2023/large-dataset/LINCS_L1000_VCAP_0-4.csv.gz
        # wget https://storage.googleapis.com/graphium-public/datasets/neurips_2023/Large-dataset/LINCS_L1000_VCAP_0-4.csv.gz
        # or set path as the URL directly
        smiles_col: "SMILES"
        label_cols: geneID-*  # geneID-* means all columns starting with "geneID-"
        # sample_size: 2000 # use sample_size for test
        task_level: graph
        splits_path: graphium/data/neurips2023/small-dataset/l1000_vcap_random_splits.pt  # Download with `wget https://storage.googleapis.com/graphium-public/datasets/neurips_2023/Large-dataset/l1000_vcap_random_splits.pt`

      l1000_mcf7:
        df: null
        df_path: graphium/data/neurips2023/large-dataset/LINCS_L1000_MCF7_0-4.csv.gz
        # wget https://storage.googleapis.com/graphium-public/datasets/neurips_2023/Large-dataset/LINCS_L1000_MCF7_0-4.csv.gz
        # or set path as the URL directly
        smiles_col: "SMILES"
        label_cols: geneID-*  # geneID-* means all columns starting with "geneID-"
        # sample_size: 2000 # use sample_size for test
        task_level: graph
        splits_path: graphium/data/neurips2023/small-dataset/l1000_mcf7_random_splits.pt  # Download with `wget https://storage.googleapis.com/graphium-public/datasets/neurips_2023/Large-dataset/l1000_mcf7_random_splits.pt`

    # Featurization
    prepare_dict_or_graph: pyg:graph
    featurization_n_jobs: 1
    featurization_progress: True
    featurization_backend: "loky"
    processed_graph_data_path: "../datacache/neurips2023-small/"
    featurization:
    # OGB: ['atomic_num', 'degree', 'possible_formal_charge', 'possible_numH' (total-valence),
    # 'possible_number_radical_e', 'possible_is_aromatic', 'possible_is_in_ring',
    # 'num_chiral_centers (not included yet)']
      atom_property_list_onehot: [atomic-number, group, period, total-valence]
      atom_property_list_float: [degree, formal-charge, radical-electron, aromatic, in-ring]
      # OGB: ['possible_bond_type', 'possible_bond_stereo', 'possible_is_in_ring']
      edge_property_list: [bond-type-onehot, stereo, in-ring]
      add_self_loop: False
      explicit_H: False # if H is included
      use_bonds_weights: False
      pos_encoding_as_features: # encoder dropout 0.18
        pos_types:
          lap_eigvec:
            pos_level: node
            pos_type: laplacian_eigvec
            num_pos: 8
            normalization: "none" # nomrlization already applied on the eigen vectors
            disconnected_comp: True # if eigen values/vector for disconnected graph are included
          lap_eigval:
            pos_level: node
            pos_type: laplacian_eigval
            num_pos: 8
            normalization: "none" # nomrlization already applied on the eigen vectors
            disconnected_comp: True # if eigen values/vector for disconnected graph are included
          rw_pos: # use same name as pe_encoder
            pos_level: node
            pos_type: rw_return_probs
            ksteps: 16

    num_workers: 5 # -1 to use all
    persistent_workers: False # if use persistent worker at the start of each epoch.
    # Using persistent_workers false might make the start of each epoch very long.
    featurization_backend: "loky"


architecture:
  model_type: FullGraphMultiTaskNetwork
  mup_base_path: null
  pre_nn:   # Set as null to avoid a pre-nn network
    out_dim: 64
    hidden_dims: 256
    depth: 2
    activation: relu
    last_activation: none
    dropout: &dropout 0.18
    normalization: &normalization layer_norm
    last_normalization: *normalization
    residual_type: none

  pre_nn_edges:   # Set as null to avoid a pre-nn network
    out_dim: 32
    hidden_dims: 128
    depth: 2
    activation: relu
    last_activation: none
    dropout: *dropout
    normalization: *normalization
    last_normalization: *normalization
    residual_type: none

  pe_encoders:
    out_dim: 32
    pool: "sum" #"mean" "max"
    last_norm: None #"batch_norm", "layer_norm"
    encoders: #la_pos |  rw_pos
      la_pos:  # Set as null to avoid a pre-nn network
        encoder_type: "laplacian_pe"
        input_keys: ["laplacian_eigvec", "laplacian_eigval"]
        output_keys: ["feat"]
        hidden_dim: 64
        out_dim: 32
        model_type: 'DeepSet' #'Transformer' or 'DeepSet'
        num_layers: 2
        num_layers_post: 1 # Num. layers to apply after pooling
        dropout: 0.1
        first_normalization: "none" #"batch_norm" or "layer_norm"
      rw_pos:
        encoder_type: "mlp"
        input_keys: ["rw_return_probs"]
        output_keys: ["feat"]
        hidden_dim: 64
        out_dim: 32
        num_layers: 2
        dropout: 0.1
        normalization: "layer_norm" #"batch_norm" or "layer_norm"
        first_normalization: "layer_norm" #"batch_norm" or "layer_norm"



  gnn:  # Set as null to avoid a post-nn network
    out_dim: &gnn_dim 64
    hidden_dims: *gnn_dim
    depth: 4
    activation: gelu
    last_activation: none
    dropout: 0.1
    normalization: "layer_norm"
    last_normalization: *normalization
    residual_type: simple
    virtual_node: 'none'
    layer_type: 'pyg:gps' #pyg:gine #'pyg:gps' # pyg:gated-gcn, pyg:gine,pyg:gps
    layer_kwargs:  # Parameters for the model itself. You could define dropout_attn: 0.1
      node_residual: false
      mpnn_type: 'pyg:mpnnplus'
      mpnn_kwargs:
        in_dim: *gnn_dim
        out_dim: *gnn_dim
        in_dim_edges: 32
        out_dim_edges: 32
      attn_type: "none" # "full-attention", "none"
      attn_kwargs: null


  graph_output_nn:
    graph:
      pooling: [sum]
      out_dim: *gnn_dim
      hidden_dims: *gnn_dim
      depth: 1
      activation: relu
      last_activation: none
      dropout: *dropout
      normalization: *normalization
      last_normalization: "none"
      residual_type: none

  task_heads:
    l1000_vcap:
      task_level: graph
      out_dim: 4890  # n_columns (978) x n_brackets (5)
      hidden_dims: 128
      depth: 2
      activation: none
      last_activation: sigmoid
      dropout: *dropout
      normalization: *normalization
      last_normalization: "none"
      residual_type: none
    l1000_mcf7:
      task_level: graph
      out_dim: 4890  # n_columns (978) x n_brackets (5)
      hidden_dims: 128
      depth: 2
      activation: none
      last_activation: sigmoid
      dropout: *dropout
      normalization: *normalization
      last_normalization: "none"
      residual_type: none

#Task-specific
predictor:
  metrics_on_progress_bar:
    l1000_vcap: []
    l1000_mcf7: []
  loss_fun:
    l1000_vcap:
      name: hybrid_ce
      n_brackets: 5
    l1000_mcf7:
      name: hybrid_ce
      n_brackets: 5
  random_seed: *seed
  optim_kwargs:
    lr: 4.e-3 # warmup can be scheduled using torch_scheduler_kwargs
    # weight_decay: 1.e-7
  torch_scheduler_kwargs:
    module_type: WarmUpLinearLR
    max_num_epochs: &max_epochs 100
    warmup_epochs: 0
    verbose: False
  scheduler_kwargs:
  #  monitor: &monitor qm9/mae/train
  #  mode: min
  #  frequency: 1
  target_nan_mask: ignore
  multitask_handling: flatten

# Task-specific
metrics:
  l1000_vcap: &classif_metrics
    - name: auc
      metric: auroc
      target_nan_mask: ignore
      multitask_handling: flatten
      squeeze_targets: True
      target_to_int: True
      task: multiclass
      num_classes: 5
    - name: ap
      metric: averageprecision
      target_nan_mask: ignore
      multitask_handling: flatten
      squeeze_targets: True
      target_to_int: True
      task: multiclass
      num_classes: 5
    - name: accuracy
      metric: accuracy
      target_nan_mask: ignore
      multitask_handling: flatten
      squeeze_targets: True
      target_to_int: True
      task: multiclass
      num_classes: 5
      top_k: 1
  l1000_mcf7: *classif_metrics

trainer:
  seed: *seed
  logger:
    save_dir: logs/neurips2023-small/
    name: *name
    project: *name
  #early_stopping:
  #  monitor: *monitor
  #  min_delta: 0
  #  patience: 10
  #  mode: &mode min
  model_checkpoint:
    dirpath: models_checkpoints/neurips2023-small/
    filename: *name
    #monitor: *monitor
    #mode: *mode
    save_top_k: 1
    every_n_epochs: 100
  trainer:
    max_epochs: *max_epochs
    min_epochs: 1
    check_val_every_n_epoch: 1
