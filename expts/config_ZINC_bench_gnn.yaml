constants:
  seed: &seed 42
  raise_train_error: true   # Whether the code should raise an error if it crashes during training

datamodule:
  module_type: "DGLFromSmilesDataModule"
  args:
    df_path: https://storage.googleapis.com/goli-public/datasets/goli-zinc-bench-gnn.zip
    cache_data_path: goli/data/cache/ZINC_bench_gnn/smiles_score.cache
    label_cols: ['score']
    smiles_col: SMILES

    # Featurization
    featurization_n_jobs: -1
    featurization_progress: True
    featurization:
      atom_property_list_onehot: [atomic-number, valence]
      atom_property_list_float: [mass, electronegativity]
      edge_property_list: [bond-type-onehot, stereo]
      add_self_loop: False
      explicit_H: False
      use_bonds_weights: False
      pos_encoding_as_features: &pos_enc
        pos_type: centroid_effective_resistances_v1
        num_pos: 1
        normalization: "none"
        disconnected_comp: True
      pos_encoding_as_directions: *pos_enc

    # Train, val, test parameters
    split_val: null
    split_test: null
    split_seed: *seed
    splits_path: goli/data/ZINC_bench_gnn/indexes_train_val_test.csv
    batch_size_train_val: 128
    batch_size_test: 256

    # Data loading
    num_workers: 0
    pin_memory: False
    persistent_workers: False  # Keep True on Windows if running multiple workers, false for single worker


architecture:
  model_type: fulldglnetwork
  pre_nn:   # Set as null to avoid a pre-nn network
    out_dim: &middle_dim 90
    hidden_dims: *middle_dim
    depth: 0
    activation: relu
    last_activation: none
    dropout: &dropout 0.
    normalization: &normalization "batch_norm"
    last_normalization: *normalization
    residual_type: none

  gnn:  # Set as null to avoid a post-nn network
    out_dim: *middle_dim
    hidden_dims: *middle_dim
    depth: 4
    activation: relu
    last_activation: none
    dropout: *dropout
    normalization: *normalization
    last_normalization: *normalization
    residual_type: simple
    pooling: 'sum'
    virtual_node: none
    layer_type: 'dgn-msgpass'
    layer_kwargs:
      # num_heads: 3
#      aggregators: [mean, max, dir1/dx_abs, dir1/smooth]
      aggregators: [mean, max, dir0/forward, dir0/backward]
      scalers: [identity, amplification, attenuation]

  post_nn:
    out_dim: 1
    hidden_dims: *middle_dim
    depth: 0
    activation: relu
    last_activation: none
    dropout: *dropout
    normalization: *normalization
    last_normalization: "none"
    residual_type: none


predictor:
  metrics_on_progress_bar: ["mae", "pearsonr", "f1 < 0", "precision < 0"]
  loss_fun: mse
  random_seed: *seed
  optim_kwargs:
    lr: 1.e-3
    weight_decay: 3.e-6
  lr_reduce_on_plateau_kwargs:
    factor: 0.5
    patience: 50
    min_lr: 1.e-5
  scheduler_kwargs:
    monitor: &monitor loss/val
    frequency: 1
  target_nan_mask: 0 # null: no mask, 0: 0 mask, ignore: ignore nan values from loss


metrics:
  - name: mae
    metric: mae
    threshold_kwargs: null

  - name: pearsonr
    metric: pearsonr
    threshold_kwargs: null

  - name: f1 < 0
    metric: f1
    num_classes: 2
    average: micro
    threshold_kwargs: &threshold_0
      operator: lower
      threshold: 0
      th_on_preds: True
      th_on_target: True
      target_to_int: True

  - name: f1 < -1
    metric: f1
    num_classes: 2
    average: micro
    threshold_kwargs:
      operator: lower
      threshold: -1
      th_on_preds: True
      th_on_target: True
      target_to_int: True

  - name: precision < 0
    metric: precision
    class_reduction: micro
    threshold_kwargs: *threshold_0

trainer:
  logger:
    save_dir: logs/ZINC_bench_gnn
  early_stopping:
    monitor: *monitor
    min_delta: 0
    patience: 80
    mode: &mode min
  model_checkpoint:
    dirpath: models_checkpoints/ZINC_bench_gnn/
    filename: "model"
    monitor: *monitor
    mode: *mode
    save_top_k: 1
    every_n_val_epochs: 1
  trainer:
    max_epochs: 2000
    min_epochs: 100
    gpus: 1

